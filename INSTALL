Installation instructions
=========================

1. enable the extension; clear all caches (at least the ini and template caches)


For performance logging
-----------------------

2. edit ezperformancelogger.ini to decide the data you want to log:
   parameter [GeneralSettings]/TrackVariables
   See file README for more details avout available data
   NB: db_queries logging by default only works with ez debug on


3. edit ezperformancelogger.ini to decide how to log it:

  a. using Apache
  to add perf data to the Apache access log, customize your Apache configuration
  taking as example the sample_httpd.conf file in the doc directory.
  It is recommended not to enable collection of execution time via
  TrackVariables when using Apache, but to rely on the more precise native
  measure obtained with %D
  Remember to restart Apache after changing its configuration

  b. using piwik or google analytics
  the perf data is logged directly to the analytics engine database, via usage
  of "custom variables" (ie. we add the perf data to the js call done for visit
  tracking). For both these tools, you will need to insert in your pagelayout
  template the standard javascript tracking code; the extension will transform
  it as appropriate to add the extra data.
  For ga, only the async tag is supported.
  NB: data reported via piwik or google analytics will not be accurate if your
  website is using a caching reverse proxy or cdn. Please use tha apache-log
  configuration in such case.

  c. using a separate log file
  this is useful if your webserver is Nginx, Lighttpd or IIS. In that case, the
  extension can log perf data all by itself to a separate log. The name of that
  file has to be configured in ezperformancelogger.ini; it can be written either
  using the same format as Apache "extended" log, with perf counters data at the
  end of the line, or in csv format


4. once logging of data is active, we recommend using a tool like httrack or
   wget to scan your complete website and get an overview of the performance
   of your web pages and identify the most resource-hungry ones.

   A good idea is to run the scan both with eZ Publish caches on and off, to
   measure the effectiveness of cache configuration.

   NB: the extension does not provide any means to visualize the logged data.
   You can use any tool from excel to matlab for that.


5. to log db performances with Debug Output disabled, uncomment the
   appropriate line in settings/site.ini.append.php and use one of the db
   connectors provided by the extension (currently only for eZP 4.6 on mysqli)


6. to log cluster-db performances with Debug Output disabled, uncomment the
   appropriate line in settings/file.ini.append.php and use one of the cluster db
   connectors provided by the extension (currently only for eZP 4.6 on mysqli)


7. to log performance data even on web pages which end prematurely or redirect
   you need to patch the index.php file and add somewhere the following line:
      eZExecution::addCleanupHandler( array( 'eZPerfLogger', 'cleanup' ) );
   a good candidate location is next to the existing eZExecution::addCleanupHandler call


For graphing performance indicators with Munin
----------------------------------------------

1. make sure you have a valid munin-node installation on your webserver

2. configure eZPerformanceLogger to record as many variables as you want (see
   paragraph above).
   The only constraint is that LOGGING TO CSV FILE HAS TO BE ENABLED (see point 4.c)

3. customize how the variables recorded by eZPerformanceLogger will show up
   in Munin graphs by editing ini settings in the [MuninSettings] section of
   ezperformancelogger.ini

4. activate the munin plugin provided within the extension.
   Detailed instructions for this step you will find in the file

   bin/scripts/ezmuninperflogger_


For profiling
-------------

1. make sure the XHProf PECL extension is installed and active

2. give to the user account that will be used for viewing profiling data permissions
   to execute hxprof/view

3. edit your config.php file and add the following lines at the top:
   (if you miss the config.php file, copy config.php-RECOMMENDED into config.php)

   include( 'extension/ezperformancelogger/classes/ezxhproflogger.php' );
   eZXHProfLogger::start();

   in alternative, you can start profiling from anywhere in your php code

4. edit design.ini in extension/ezperformacelogger/settings, and uncomment the
   lines corresponding to your eZ version

5. view any website page: a link to its profiling info is at the bottom of the debug output

6. in the Admin Interface, in the Setup tab, you will find a link to a page listing
   all available profiling data for viewing.

7. all profiling data is stored permanently on disk, in var/log/xhprof. To avoid
   filling the hard-disk, please schedule execution of the removexhprofdata cronjob
