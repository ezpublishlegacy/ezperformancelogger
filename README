An extension dedicated to measuring performances of eZ Publish websites
=======================================================================

This tool is meant to measure performances of eZ Publish sites.

Performance measurement is designed to be used in production.
It will work with ezdebug turned off, and tries to be lightweight not to slow
down your server too much because of the measurements. For the same reason by
default it does not store performance data into the database, but as part of
the existing Apache log.

It doubles as profiling tool as well, since version 0.4.
This means having at your fingertips more detailed information that the standard
debug oputput, complete with drill-down capaibilities and call graphs.

Note for the causal reader: profiling means measuring all php function calls
executed by the web page, and is extremely heavy. It should only be used in development,
not in production environments.


Requirements:
-------------
. eZP 4.x
. apache webserver recommended
. optionally: either a piwik or ga account
. optionally: the xhprof profiler and graphviz


How it works: performance logging
---------------------------------

- by logging performance indicators for every page view
  Supported indicators are, so far:
  . total execution time
  . total memory usage
  . number of db queries
  . custom indicators set by the developer using php code

- the logging of the data can be directed to different media:
  . the Apache access log
  . the piwik web analytics engine
  . the google analytics engine
  . a separate log file
  and in the future even more.

  Logging to the Apache acces log is recommended for a number of reasons: by default
  apache logs are rotated, so you do not risk filling your disks with data, and
  there is less of an IO performance hit in logging there, as the log files are
  written anyway.

- to ease statistical usage of the perf data saved in the Apache log, a courtesy cronjob/
  command line script is provided: updateperfstats.
  It can be used in a 2-phase performance analysis scenario:
  Phase 1: enable and configure ezperformanceogger to log to Apache log or to a
           custom lo file; execute load tests
  Phase 2: run php extension/ezperformancelogger/bin/php/updateperfstats.php to
           parse the Apache access log and produce a csv file; import that csv
           file in your preferred spreadsheet tool or database

NB: the extension does not yet provide a way to visualize the logged
data, you will need an external tool for that:
. for data streamed to the Apache log or a separate log file, a spreadsheet program which can import csv files
. for data streamed to piwik or ga, use the analytics tool web interface

Notes about collected data:
- measured script runtime is a bit shorter than reality, as we can not hook at the very beginning and end of php process execution
- measured time is rounded to milliseconds
- measured ram usage is rounded to 1000 bytes
- db queries executed can only (most likely?) be measured when debug ouput is turned on


How it works: profiling
-----------------------

- the XHProf PECL extension is required to get profiling information

- profiling is enabled at the beginning of page execution in config.php, and stops
  a little bit before page ends. As such it is not 100% accurate

- profiling information is saved in files in var/log/xhprof

- a link to see detailed profiling information is added to the debug output at
  the bottom of the page (via javascript)

- all profiling data is stored, and can be viewed later. It is accessible from
  the Setup tab in the Admin Interface

- profiling can be enabled/disabled independently of performance logging, but when
  it is enabled any memory or execution time numbers logged will be useless

- for more info on XHProf, Google is your friend
