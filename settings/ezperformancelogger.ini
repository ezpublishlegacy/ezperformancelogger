
[GeneralSettings]

# Variables to log.
# NB: Array index is important for piwik/ga logging only.

# bytes, rounded to 1000 bytes (int)
TrackVariables[]=mem_usage

# Note: Apache can log execution time by itself with the token %D
# seconds, rounded to 1msec (float)
TrackVariables[]=execution_time

# Note: this one is only available when debug output is enabled
# (int)
TrackVariables[]=db_queries

# Current user id
#TrackVariables[]=user_id

# Only available when Apache mod_unique_id is enabled.
# This is useful f.e. to correlate a separate csv log with the apache log (provided unique_id is logged there as well)
#TrackVariables[]=unique_id

# Only available when xhprof php extension is enabled
#TrackVariables[]=xhkprof_runs

# Any data from module_result and module_result.content_info can be traced.
# At the moment, ONLY WORKS for eZP 4.7 and earlier
# Eg:
#TrackVariables[]=content_info/class_identifier
#TrackVariables[]=content_info/node_id
#TrackVariables[]=module_result/section_id
# etc...

# When debug output is enabled, any time accumulator can be logged as well,
# provided you know its 'key' (used to refer to it in php code, it is generally
# different from the name shown in debug output's html gui)
# Ex:
# Total time spent processing template files
#TrackVariables[]=accumulators/template_processing
# Number of templates processed
#TrackVariables[]=accumulators/template_processing/count

# Some events can be traced as well - only the number of times they are fired is recorded
# NB: events related to content publication are often fired by pages which redirect,
# which means that to be able to trace them correctly you will have to hack the
# index.php file (see INSTALL file for more details on how to do it)
# view-cache clearing
#TrackVariables[]=events/content/cache
# image-alias generation
#TrackVariables[]=events/image/alias

# Any data found in the $_SERVER array can be traced as well.
# Example: the http request method (GET/POST/etc). Disable it when logging to the Apache log, as it already contains that info
TrackVariables[]=_server/REQUEST_METHOD

# More DB-related variables can logged if a customized db-connector class is used
# (this works even when debug output is disabled).
# In order to have them available you should uncomment the VariableProviders[]=eZMySQLiTracingXXDB
# line below, as well as edit site.ini.append.php
# (# of db connections per page)
#TrackVariables[]=mysqli_connection
# (# of queries per page)
#TrackVariables[]=mysqli_query
# (# of selects per page)
#TrackVariables[]=mysqli_loop
# (# of charset conversion of select results per page)
#TrackVariables[]=mysqli_conversion
# (db connection time in seconds, rounded to ms)
#TrackVariables[]=mysqli_connection_t
# (time spent on queries, rounded to ms)
#TrackVariables[]=mysqli_query_t
# (max time spent on a query, rounded to ms)
#TrackVariables[]=mysqli_query_tmax
# (time spent on selects, rounded to ms)
#TrackVariables[]=mysqli_loop_t
# (time spent on charset conversion of select results, rounded to ms)
#TrackVariables[]=mysqli_conversion_t

# The same holds true for cluster-db variables with VariableProviders[]=eZDFSFileHandlerTracingXXMySQLiBackend
# and file.ini.append.php
# (# of cluster queries per page)
#TrackVariables[]=mysql_cluster_query
# (total time spent on cluster queries, rounded to ms)
#TrackVariables[]=mysql_cluster_query_t
# (max time spent on a cluster query, rounded to ms)
#TrackVariables[]=mysql_cluster_query_tmax
# (# of cluster dfs operations per page: file copy, create, delete, ...)
#TrackVariables[]=mysql_cluster_dfs_operations
# (total time spent on cluster dfs operations, rounded to ms)
#TrackVariables[]=mysql_cluster_dfs_operations_t
# (max time spent on a cluster dfs operations, rounded to ms)
#TrackVariables[]=mysql_cluster_dfs_operations_tmax
# (# of times per page that a wait-for-another-process-to-generate-cache-file event happened)
#TrackVariables[]=mysql_cluster_cache_waits
# (total time spent on wait-for-another-process-to-generate-cache-file events)
#TrackVariables[]=mysql_cluster_cache_waits_t
# (max time spent on a wait-for-another-process-to-generate-cache-file event)
#TrackVariables[]=mysql_cluster_cache_waits_tmax
#
# and ImageMagick image conversion: VariableProviders[]=eZImageTracingXXShellHandler plus image.ini.append.php
#TrackVariables[]=imagemagick_image_conversion
#TrackVariables[]=imagemagick_image_conversion_t
#TrackVariables[]=imagemagick_image_conversion_tmax

# Number of times text was extracted from binary files f(for the search engine, total time takes and max time taken).
# These work when
# 1. enabling eZPerfLoggerMetadatExtractorProvider later on thsi file, and
# 2. enabling the correspinding extractors in binaryfile.ini.append.php
#TrackVariables[]=binaryfile_metadataextractions
#TrackVariables[]=binaryfile_metadataextractions_t
#TrackVariables[]=binaryfile_metadataextractions_tmax

#TrackVariables[]=mail_sent
#TrackVariables[]=mail_sent_t
#TrackVariables[]=mail_sent_tmax

# A list of php classes used to provide performance variables and their values.
# At the end of every page execution, the static method measure() will be invoked on these
# classes, to allow them to set proper measured data for the custom variables defined above.
# Every class registered here should implement the eZPerfLoggerProvider interface.
# Note: for munin compatibility, variable names should contain only a-z A-Z 0-9 _
#       see http://munin-monitoring.org/wiki/notes_on_datasource_names
VariableProviders[]
VariableProviders[]=eZPerfLogger
VariableProviders[]=ezPerfLoggerEventListener

# When enbaling this, also edit binaryfile.ini.append.php to enable the corrsponding metadata extractors
#VariableProviders[]=eZPerfLoggerMetadataExtractorProvider

# ...
#VariableProviders[]=eZPerfLoggerMailProvider

# The default providers available for all release from 4.4 to 5.1 (change name as appropriate) are:
#VariableProviders[]=eZMySQLiTracing47DB
#VariableProviders[]=eZDFSTracing47FileHandler
#VariableProviders[]=eZDFSFileHandlerTracing47MySQLiBackend
#VariableProviders[]=eZDFSFileHandlerTracing47DFSBackend
#VariableProviders[]=eZImageTracing47ShellHandler

# Only for eZP 5.0, oracle variants are also available (use 'mysqli' names for FileHandler and DFSBackend)
#VariableProviders[]=eZOracleTracing50DB
#VariableProviders[]=eZDFSFileHandlerTracing50OracleBackend

# When using as VariableProvider a member of the eZMySQLiTracingXXDB family, and the corresponding db connector
# has been activated in site.ini.append.php, you can take advantage of the fact that the db connector is always
# initialized to force performance tracing of pages which end up in redirects, without hacking kernel files.
# To this end, set the following parameter to enabled
# NB: this will have as side effect that cli scripts performances will also start to be logged, including cronjobs
AlwaysRegisterShutdownPerfLogger=disabled

# How to log performance values:
# Many logging methods can be enabled at the same time
LogMethods[]

# adding info for Apache to put in its own log - needs some specific apache customlog format to work,
# see the example configuration in file doc/sample_httpd.conf
# (only works when running apache + mod_php, not cgi/fastcgi)
#LogMethods[]=apache

# by setting custom variables for common analytics engines:
# piwik: to make this work, you need a piwik js tag in your templates, including the "piwikTracker.trackPageView();" line
#LogMethods[]=piwik

# ODOSCOPE: to make this work, you need the ezodoscope extension, which will add tag in your templates, including the lnk to the "images/osc.gif" file
# NB: when enabled, it needs the eZPerfLoggerOdoscopeLogger logger to be enabled (see later in this file)
#LogMethods[]=odoscope

# google analytics: to make this work, you need an async ga tag in your templates, including the "_gaq.push(['_trackPageview']);" line
#LogMethods[]=googleanalytics

# by logging directly to a custom log file - NB: more expensive than letting Apache do it
# (uses same log format as Apache "extended" one)
#LogMethods[]=logfile

# by logging directly to a csv-formatted file.
# The csv contains the perf. data first, then some useful http request info: date, client ip, http status code, content length, url
LogMethods[]=csv

# by logging to a Pinba server (see http://pinba.org) - EXPERIMENTAL !!!
# NB 1: the PINBA extension for php is not needed to make this work
# NB 2: the PINBA protocol is designed to log custom timers, with each timer measuring a number of executions and the total time spent.
#       This extension logs instead custom KPIs, where each KPI has a single value (i.e. the values recorded by a single ez accumulator would be split in 2 or more KPIS: number of runs, total time, max time per run, min time per run etc...).
#       To make things "work", we will be sending to the Pinba server every KPI as a standalone timer, with a count of 1 executions and a total time corresponding to the KPI value.
#       There is no guarantee whatsoever that this will work on the side of the Pinba server. Take care
# When uncommenting this, also uncomment the corresponding LogProviders line below
#LogMethods[]=pinba

# by logging to a Statsd server (see https://github.com/etsy/statsd)
# When uncommenting this, also uncomment the corresponding LogProviders line below
#LogMethods[]=statsd

# by logging to syslog (on windows messages will be added to the Event Log)
# nb: syslog message format is currently the same as Apache extended log
#LogMethods[]=syslog

# by logging to Monolog - which is itself a flexible logger (see later for more
# nb: config. parameters)
# When uncommenting this, also uncomment the corresponding LogProviders line below
#LogMethods[]=monolog

# not yet supported
# by inserting data directly in a custom table in the eZ database - be wary of its size!
#LogMethods[]=database

# The php classes which can be used to log the measured data.
# Every class listed here needs to implement the eZPerfLoggerLogger interface,
# i.e. provide support for one or more of the LogMethods above
LogProviders[]
LogProviders[]=eZPerfLogger
#LogProviders[]=eZPerfLoggerPinbaLogger
#LogProviders[]=eZPerfLoggerMonologLogger
#LogProviders[]=eZPerfLoggerOdoscopeLogger
#LogProviders[]=eZPerfLoggerStatsdLogger

# Optional: logging filters
# Every php class registered here needs to implement the eZPerfLoggerFilter interface.
# If no logging filter is defined, performance data is logged on every page.
# If filters are defined, perf. data is logged only when at least one filter class returns true
LogFilters[]
# Example filters provided:
# Logs data only if total page execution time exceeds a certain amount
#LogFilters[]=eZPerfLoggerSlowpagesFilter
# Logs data only if total memory used by page exceeds a certain amount
#LogFilters[]=eZPerfLoggerMemoryhungrypagesFilter
# Logs data on a certain portion of all pages, chosen randomly
#LogFilters[]=eZPerfLoggerRandomFilter

[LogFilterSettings]
# number of seconds above which pages are considered executing slowly (and hence logged)
SlowpagesFilterLimit=5
# number of bytes above which pages will be logged
MemoryhungrypagesFilter=50000
# one page every N will be logged
RandomFilterDivisor=100

[logfileSettings]
# The name of the log file, for example mytest.log
# NB: this is used only by logging method "logfile" above.
# When logging method "apache" is used you should properly configure logfile.ini
FileName=var/log/ezperflog.log

# Whether to rotate the perf log files when running the "rotatelogs" cronjob or cli script
RotateFiles=enabled
# Max log file size (in bytes) before rotation happens. Defaults to 1MB
MaxLogSize=1048576
# How many logfiles to keep. Set to 0 to never remove
MaxLogrotateFiles=8

# The following settings apply when StorageClass=eZPerfLoggerCSVStorage or
# when LogMethods[]=csv
[csvSettings]
FileName=var/log/ezperflog.csv
# We allow some flexibility in the format of the generated csv file.
# This is because, even though there is an official spec for csv (http://tools.ietf.org/html/rfc4180),
# using semicolons to separate data makes more sense - we can leave both the
# comma and dot characters for use by floating point numbers, thus appeasing
# different spreadsheet software.
# Separator char for csv
Separator=;
# Quotes around url field. Can be left empty
Quotes=

# Whether to rotate the perf log csv files when running the "rotatelogs" cronjob or cli script
RotateFiles=enabled

# The following settings apply in a 2-step scenario:
# 1. use "apache" or "logfile" in LogMethods
# 2. run the updateperfstats cronjob to parse the log file and store the retrieved data
#    in some storage repository (currently supported: csv file)
[ParsingSettings]
# A list of regexps, used to find urls not to match when parsing the access log
ExcludeUrls[]
ExcludeUrls[]=/\.(css|gif|ico|js|jpe?g|png)$/

# The php class which will be used to store the perf data (typically in a db):
# when the updateperfstats cronjob is run, it parses the access log, extracts
# data and passes it to this class to storing elsewhere
# supported: eZPerfLoggerCSVStorage (in the future: eZPerfLoggerDBStorage)
# NB: when the LogMethod "database" is used (see parameter above), perf data
# is stored directly to the db just as if eZPerfLoggerDBStorage was used here.
# In fact, in that case you should not run the cronjob, as you will get double
# statistics
StorageClass=eZPerfLoggerCSVStorage

# The following settings apply when LogMethods[]=monolog
[MonologSettings]
# The severity level used for log messages generated by the extension. See the
# Monolog Logger class for valid values (100 to 600 so far). 200=INFO
SeverityLevel=200

# Whether to send to Monolog one message per measured variable or a single message
# with all of them
Coalescevariables=enabled

# Array with enabled handlers. Supported: NativeMailer, Raven, RotatingFile,
# Socket, Stream, SwiftMailer, Syslog etc... depending on version of Monolog in use
LogHandlers[]
#LogHandlers[]=Stream

# For every handler, there can be configuration parameters. These are in fact passed
# to the constructor of the handler php class.
# F.e. for the Stream handler, there is only 1 param needed: the filename to log to
#LogHandler_Stream[]
#LogHandler_Stream[]=/var/log/ezperflog.log

# The following settings apply when LogMethods[]=odoscope
[OdoscopeSettings]
# A prefix to be added to every variable name, eg: ezp.
VariablePrefix=ezp_

# The following settings apply when LogMethods[]=statsd
[StatsdSettings]

# Statsd server address
Host=
Port=

# For the following 2 settings, Replacement Tokens are accepted:
# - the prefix/postfix string is split in parts, using . character as delimiter
# - a token is a part starting with $ sign
# - it will be replaced with the corresponding value from $module_result and $module_result.content_info
# This makes it possible to have variable names which allow grouping/filtering in graphite
# Eg: VariablePostfix=.$content_info/class_identifier.$module_result/node_id
#     results in variable mem_usage.folder.5 being logged for /media

# A prefix to be added to every variable name, eg: ezp.
VariablePrefix=ezp.
# A postfix to be added to every variable name
VariablePostfix=.$module_params/module_name.$module_params/function_name.$content_info/class_identifier.$module_result/node_id

RemoveEmptyTokensInVariable=enabled

# For best performances, you can send a single UDP packet with all metrics.
# You should be careful to keep the total length of the payload within your network's MTU - enabling this only on
# intranets with jumbo frames is a good idea
SendMetricsInSinglePacket=disabled

# For each variable in Trackvariables, you should define a corresponding type.
# Do not forget to add here your own custom-tracked variables
# Types: c (counter), ms (timing), g (gauge) s (set)
# Default is "ms", which is the most flexible data type in Statsd
# For more info see: https://github.com/etsy/statsd/blob/master/docs/metric_types.md
VariableTypes[]
VariableTypes[mem_usage]=
VariableTypes[execution_time]=
VariableTypes[db_queries]=
VariableTypes[accumulators/template_processing]=
VariableTypes[accumulators/template_processing/count]=
VariableTypes[mysqli_connection]=
VariableTypes[mysqli_query]=
VariableTypes[mysqli_loop]=
VariableTypes[mysqli_conversion]=
VariableTypes[mysqli_connection_t]=
VariableTypes[mysqli_query_t]=
VariableTypes[mysqli_query_tmax]=
VariableTypes[mysqli_loop_t]=
VariableTypes[mysqli_conversion_t]=
VariableTypes[mysql_cluster_query]=
VariableTypes[mysql_cluster_query_t]=
VariableTypes[mysql_cluster_query_tmax]=
VariableTypes[mysql_cluster_dfs_operations]=
VariableTypes[mysql_cluster_dfs_operations_t]=
VariableTypes[mysql_cluster_dfs_operations_tmax]=
VariableTypes[mysql_cluster_cache_waits]=
VariableTypes[mysql_cluster_cache_waits_t]=
VariableTypes[mysql_cluster_cache_waits_tmax]=
VariableTypes[imagemagick_image_conversion]=
VariableTypes[imagemagick_image_conversion_t]=
VariableTypes[imagemagick_image_conversion_tmax]=

# Graphite url as seen from the webserver itself (eZ will send GET requests to munin
# to display it within the eZ control panel when set)
GraphiteURL=

# The following settings apply when LogMethods[]=munin
[MuninSettings]

# Munin url as seen from the webserver itself (eZ will send GET requests to munin
# to display it within the eZ control panel when set)
MuninURL=

# Name used for the whole set of graphs produced (i.e. the link at the top of the Munin page).
# You can change it if you have e.g. many eZ instances on the same webserver monitored by 1 Munin
GroupName=ezperformancelogger

# When using Munin to graph variables, extra info can be added to make the
# output nicer.
# See for details http://munin-monitoring.org/wiki/protocol-config
#
# For every variable tracked by eZPerformanceLogger, a dedicated Munin graph is
# shown, showing avg, min and max values for it over the last 5 minutes.
#
# Use VariableDescription_<varname> for graph-generic params
# Use VariableDescription_<varname>_<avg|min|max> for line-specific params

VariableDescription_mem_usage[graph_title]=Memory per page
VariableDescription_mem_usage[graph_vlabel]=bytes

# This line is here to make the pageviews per second line appear on a graph
#VariableDescription_mem_usage[pageviews.graph]=yes

# For the "average value per page", the plugin gives us the total, and we tell rrd to divide by pageviews.
# Otherwise we get the "average per 5 minutes interval", which is less useful
VariableDescription_mem_usage_tot[min]=0
VariableDescription_mem_usage_tot[label]=average
VariableDescription_mem_usage_tot[cdef]=mem_usage_tot,pageviews,/
# uncomment to hide the line tracing this variable
#VariableDescription_mem_usage_avg[graph]=no
VariableDescription_mem_usage_min[min]=0
VariableDescription_mem_usage_min[label]=minimum
# uncomment to hide the line tracing this variable
#VariableDescription_mem_usage_min[graph]=no
VariableDescription_mem_usage_max[min]=0
VariableDescription_mem_usage_max[label]=maximum
# customize this based on your gut feelings. Default picked to be 100M per page
VariableDescription_mem_usage_max[warning]=100000000
# uncomment to hide the line tracing this variable
#VariableDescription_mem_usage_max[graph]=no

VariableDescription_execution_time[graph_title]=Execution time per page
VariableDescription_execution_time[graph_vlabel]=seconds
VariableDescription_execution_time_tot[min]=0
VariableDescription_execution_time_tot[label]=average
VariableDescription_execution_time_tot[cdef]=execution_time_tot,pageviews,/
VariableDescription_execution_time_min[min]=0
VariableDescription_execution_time_min[label]=minimum
VariableDescription_execution_time_max[min]=0
VariableDescription_execution_time_max[label]=maximum
# customize this based on your gut feelings. Default picked to be 10 secs per page
VariableDescription_execution_time_max[warning]=10

VariableDescription_db_queries[graph_title]=DB queries per page
VariableDescription_db_queries_tot[min]=0
VariableDescription_db_queries_tot[label]=average
VariableDescription_db_queries_tot[cdef]=db_queries_tot,pageviews,/
VariableDescription_db_queries_min[min]=0
VariableDescription_db_queries_min[label]=minimum
VariableDescription_db_queries_max[min]=0
VariableDescription_db_queries_max[label]=maximum

# The 'pageviews' graph has a slightly different configuration section
VariableDescription_pageviews[graph_title]=Page views
VariableDescription_pageviews_count[min]=0
VariableDescription_pageviews_count[label]=count


# Besides logging data, we can enable xhprof to get complete profiling info
# NB: needs the xhprof PECL extension to work
[XHProfSettings]
# when this is enabled, and any code starts an xhprof session, an html comment is
# added to the bottom of the page with the profiling session ids. This is used to
# show a link in the debug output panel to view the profiling data
AppendXHProfTag=enabled
# Location of the dot command from graphviz (full path), if not in the system PATH
DotCommand=dot
