
[GeneralSettings]

# Variables to log. Array index is important for piwik/ga logging only
# Currently supported: mem_usage, execution_time, db_queries,
# unique_id (when Apache mod_unique_id is enabled), xhkprof_runs (when xhprof php extension is enabled)
# (using the included eZPerfLogger class, custom user-added variables are also possible)

# bytes, rounded to 1000 bytes (int)
TrackVariables[1]=mem_usage

# Note: Apache can log execution time by itself with the token %D
# seconds, rounded to 1msec (float)
TrackVariables[2]=execution_time

# Note: this one is only available when debug output is enabled
# (int)
TrackVariables[3]=db_queries

# When debug output is enabled, any time accumulator can be logged as well,
# provided you know his 'key' (used to refer to it in php code, it is generally
# different from the name shown in debug ouput's html gui)
# Ex:
# Total time spent processing template files
#TrackVariables[]=accumulators/template_processing
# Number of templates processed
#TrackVariables[]=accumulators/template_processing/count

# Some events can be traced as well - only the number of tyimes they are fired is recorded
# NB: events related to content publication are often fired by pages which redirect,
# which means that to be able to trace them correctly you will have to hack the
# index.php file (see INSTALL file for more details on how to do it)
# view-cache clearing
#TrackVariables[]=events/content/cache
# image-alias generation
#TrackVariables[]=events/image/alias

# More DB-related variables can logged if a customized db-connector class is used
# (this works even when debug output is disabled).
# In order to have them available you should uncomment the VariableProviders[]=eZMySQLiTracingXXDB
# line below
#mysqli_connection (# of db connections per page)
#mysqli_query (# of queries per page)
#mysqli_loop (# of selects per page)
#mysqli_conversion (# of charset conversion of select results per page)
#mysqli_connection_t (db connection time in seconds, rounded to ms)
#mysqli_query_t (time spent on queries, rounded to ms)
#mysqli_query_tmax (max time spent on a query, rounded to ms)
#mysqli_loop_t (time spent on selects, rounded to ms)
#mysqli_conversion_t (time spent on charset conversion of select results, rounded to ms)
#
# the same holds true for cluster-db variables and VariableProviders[]=eZDFSFileHandlerTracingXXMySQLiBackend
#mysql_cluster_query (# of cluster queries per page)
#mysql_cluster_query_t (total time spent on cluster queries, rounded to ms)
#mysql_cluster_query_tmax (max time spent on a cluster query, rounded to ms)
#mysql_cluster_dfs_operations (# of cluster dfs operations per page: file copy, create, delete, ...)
#mysql_cluster_dfs_operations_t (total time spent on cluster dfs operations, rounded to ms)
#mysql_cluster_dfs_operations_tmax (max time spent on a cluster dfs operations, rounded to ms)
#mysql_cluster_cache_waits (# of times per page that a wait-for-another-process-to-generate-cache-file event happened)
#mysql_cluster_cache_waits_t (total time spent on wait-for-another-process-to-generate-cache-file events)
#mysql_cluster_cache_waits_tmax (max time spent on a wait-for-another-process-to-generate-cache-file event)

# A list of php classes used to provide performance variables and their values.
# At the end of every page execution, the static method measure() will be invoked on these
# classes, to allow them to set proper measured data for the custom variables defined above.
# Every class registered here should implement the eZPerfLoggerProvider interface.
# Note: for munin compatibility, variable names should contain only a-z A-Z 0-9 _
#       see http://munin-monitoring.org/wiki/notes_on_datasource_names
VariableProviders[]
VariableProviders[]=eZPerfLogger
VariableProviders[]=ezPerfLoggerEventListener

#VariableProviders[]=eZMySQLiTracing44DB
#VariableProviders[]=eZMySQLiTracing46DB
#VariableProviders[]=eZDFSFileHandlerTracing46MySQLiBackend

# How to log performance values:
# Many logging methods can be enabled at the same time
LogMethods[]

# adding info for Apache to put in its own log - needs some specific apache customlog format to work,
# see the example configuration in file doc/sample_httpd.conf
# (only works when running apache + mod_php, not cgi/fastcgi)
#LogMethods[]=apache

# by setting custom variables for common analytics engines:
# piwik: to make this work, you need a piwik js tag in your templates, including the "piwikTracker.trackPageView();" line
#LogMethods[]=piwik

# google analytics: to make this work, you need an async ga tag in your templates, including the "_gaq.push(['_trackPageview']);" line
#LogMethods[]=googleanalytics

# by logging directly to a custom log file - NB: more expensive than letting Apache do it
# (uses same log format as Apache "extended" one)
#LogMethods[]=logfile

# by logging directly to a csv-formatted file.
# The csv contains the perf. data first, then some useful http request info: date, cient ip, http status code, content length, url
LogMethods[]=csv

# by logging to syslog (on windows messages will be added to the Event Log)
# nb: syslog message format is currently the same as Apache extended log
#LogMethods[]=syslog

# not yet supported
# by inserting data directly in a custom table in the eZ database - be wary of its size!
#LogMethods[]=database

# The php classes which can be used to log the measured data.
# Every class listed here needs to implement the eZPerfLoggerLogger interface,
# i.e. provide support for one or more of the LogMethods above
LogProviders[]
LogProviders[]=eZPerfLogger

# Optional: logging filters
# Every php class registered here needs to implement the eZPerfLoggerFilter interface.
# If no logging filter is defined, performance data is logged on every poge.
# If filters are defined, perf. data is logged only when at least one filter class returns true
LogFilters[]


[logfileSettings]
# The name of the log file, for example mytest.log
# NB: this is used only by logging method "logfile" above.
# When logging method "apache" is used you should properly configure logfile.ini
FileName=var/log/ezperflog.log

# Whether to rotate the perf log files when running the "rotatelogs" cronjob or cli script
RotateFiles=enabled
# Max log file size (in bytes) before rotation happens. Defaults to 1MB
MaxLogSize=1048576
# How many logfiles to keep. Set to 0 to never remove
MaxLogrotateFiles=8

# The following settings apply when StorageClass=eZPerfLoggerCSVStorage or
# when LogMethods[]=csv
[csvSettings]
FileName=var/log/ezperflog.csv
# We allow some flexibility in the format of the generated csv file.
# This is because, even though there is an official spec for csv (http://tools.ietf.org/html/rfc4180),
# using semicolons to separate data makes more sense - we can leave both the
# comma and dot characters for use by floating point numbers, thus appeasing
# different spreadsheet software.
# Separator char for csv
Separator=;
# Quotes around url field. Can be left empty
Quotes=

# Whether to rotate the perf log csv files when running the "rotatelogs" cronjob or cli script
RotateFiles=enabled

# The following settings apply in a 2-step scenario:
# 1. use "apache" or "logfile" in LogMethods
# 2. run the updateperfstats cronjob to parse the log file and store the retrieved data
#    in some storage repository (currently supported: csv file)
[ParsingSettings]
# A list of regexps, used to find urls not to match when parsing the access log
ExcludeUrls[]
ExcludeUrls[]=/\.(css|gif|ico|js|jpe?g|png)$/

# The php class which will be used to store the perf data (typically in a db):
# when the updateperfstats cronjob is run, it parses the access log, extracts
# data and passes it to this class to storing elsewhere
# supported: eZPerfLoggerCSVStorage (in the future: eZPerfLoggerDBStorage)
# NB: when the LogMethod "database" is used (see parameter above), perf data
# is stored directly to the db just as if eZPerfLoggerDBStorage was used here.
# In fact, in that case you should not run the cronjob, as you will get double
# statistics
StorageClass=eZPerfLoggerCSVStorage


[MuninSettings]

# Munin url as seen from the webserver itself (eZ will send GET requests to munin
# to display it within the eZ control panel when set)
MuninURL=

# Name used for the whole set of graphs produced (i.e. the link at the top of the Munin page).
# You can change it if you have e.g. many eZ instances on the same webserver monitored by 1 Munin
GroupName=ezperformancelogger

# When using Munin to graph variables, extra info can be added to make the
# output nicer.
# See for details http://munin-monitoring.org/wiki/protocol-config
#
# For every variable tracked by eZPerformanceLogger, a dedicated Munin graph is
# shown, showing avg, min and max values for it over the last 5 minutes.
#
# Use VariableDescription_<varname> for graph-generic params
# Use VariableDescription_<varname>_<avg|min|max> for line-specific params

VariableDescription_mem_usage[graph_title]=Memory per page
VariableDescription_mem_usage[graph_vlabel]=bytes

# This line is here to make the pageviews per second line appear on a graph
#VariableDescription_mem_usage[pageviews.graph]=yes

# For the "average value per page", the plugin gives us the total, and we tell rrd to divide by pageviews.
# Otherwise we get the "average per 5 minutes interval", which is less useful
VariableDescription_mem_usage_tot[min]=0
VariableDescription_mem_usage_tot[label]=average
VariableDescription_mem_usage_tot[cdef]=mem_usage_tot,pageviews,/
# uncomment to hide the line tracing this variable
#VariableDescription_mem_usage_avg[graph]=no
VariableDescription_mem_usage_min[min]=0
VariableDescription_mem_usage_min[label]=minimum
# uncomment to hide the line tracing this variable
#VariableDescription_mem_usage_min[graph]=no
VariableDescription_mem_usage_max[min]=0
VariableDescription_mem_usage_max[label]=maximum
# customize this based on your gut feelings. Default picked to be 100M per page
VariableDescription_mem_usage_max[warning]=100000000
# uncomment to hide the line tracing this variable
#VariableDescription_mem_usage_max[graph]=no

VariableDescription_execution_time[graph_title]=Execution time per page
VariableDescription_execution_time[graph_vlabel]=seconds
VariableDescription_execution_time_tot[min]=0
VariableDescription_execution_time_tot[label]=average
VariableDescription_execution_time_tot[cdef]=execution_time_tot,pageviews,/
VariableDescription_execution_time_min[min]=0
VariableDescription_execution_time_min[label]=minimum
VariableDescription_execution_time_max[min]=0
VariableDescription_execution_time_max[label]=maximum
# customize this based on your gut feelings. Default picked to be 10 secs per page
VariableDescription_execution_time_max[warning]=10

VariableDescription_db_queries[graph_title]=DB queries per page
VariableDescription_db_queries_tot[min]=0
VariableDescription_db_queries_tot[label]=average
VariableDescription_db_queries_tot[cdef]=db_queries_tot,pageviews,/
VariableDescription_db_queries_min[min]=0
VariableDescription_db_queries_min[label]=minimum
VariableDescription_db_queries_max[min]=0
VariableDescription_db_queries_max[label]=maximum

# The 'pageviews' graph has a slightly different configuration section
VariableDescription_pageviews[graph_title]=Page views
VariableDescription_pageviews_count[min]=0
VariableDescription_pageviews_count[label]=count


# Besides logging data, we can enable xhprof to get complete profiling info
# NB: needs the xhprof PECL extension to work
[XHProfSettings]
# when this is enabled, and any code starts an xhprof session, an html comment is
# added to the bottom of the page with the profiling session ids. This is used to
# show a link in the debug output panel to view the profiling data
AppendXHProfTag=enabled
# Location of the dot command from graphviz (full path), if not in the system PATH
DotCommand=dot
