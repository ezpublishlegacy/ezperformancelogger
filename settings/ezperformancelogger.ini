
[GeneralSettings]

# Variables to log. Array index is important for piwik/ga logging only
# Currently supported: mem_usage, execution_time, db_queries,
# unique_id (when Apache mod_unique_id is enabled), xhkprof_runs (when xhprof php extension is enabled)
# (using the included eZPerfLogger class, custom user-added variables are also possible)

# bytes, rounded to 1000 bytes (int)
TrackVariables[1]=mem_usage

# Note: Apache can log execution time by itself with the token %D
# seconds, rounded to 1msec (float)
TrackVariables[2]=execution_time

# Note: this one is only available when debug output is enabled
# (int)
TrackVariables[3]=db_queries

# More DB-related variables can logged if a customized db-connector class is used.
# In order to have them available you should uncomment the VariableProviders[]=eZMySQLiTracingXXDB
# line below
# mysqli_connection (# of db connections per page)
# mysqli_query (# of queries per page)
# mysqli_loop (# of selects per page)
# mysqli_conversion (# of charset conversion of select results per page)
# mysqli_connection_t (db connection time in seconds, rounded to ms)
# mysqli_query_t (time spent on queries, rounded to ms)
# mysqli_query_tmax (max time spent on a query, rounded to ms)
# mysqli_loop_t (time spent on selects, rounded to ms)
# mysqli_conversion_t (time spent on charset conversion of select results, rounded to ms)
#
# the same holds true for cluster-db variables and VariableProviders[]=eZDFSFileHandlerTracingXXMySQLiBackend
# mysql_cluster_query (# of cluster queries per page)
# mysql_cluster_query_t (total time spent on cluster queries, rounded to ms)
# mysql_cluster_query_tmax (max time spent on a cluster query, rounded to ms)

# A list of php classes used to provide performance variables and their values.
# At the end of every page execution, the static method measure() will be invoked on these
# classes, to allow them to set proper measured data for the custom variables defined above.
# Every class registered here should implement the eZPerfLoggerProvider interface.
VariableProviders[]
VariableProviders[]=eZPerfLogger

#VariableProviders[]=eZMySQLiTracing44DB
#VariableProviders[]=eZMySQLiTracing46DB
#VariableProviders[]=eZDFSFileHandlerTracing46MySQLiBackend

# How to log performance values:
# Many logging methods can be enabled at the same time
LogMethods[]

# adding info for Apache to put in its own log - needs some specific apache customlog format to work,
# see the example configuration in file doc/sample_httpd.conf
# (only works when running apache + mod_php, not cgi/fastcgi)
#LogMethods[]=apache

# by setting custom variables for common analytics engines:
# piwik: to make this work, you need a piwik js tag in your templates, including the "piwikTracker.trackPageView();" line
#LogMethods[]=piwik

# google analytics: to make this work, you need an async ga tag in your templates, including the "_gaq.push(['_trackPageview']);" line
#LogMethods[]=googleanalytics

# by logging directly to a custom log file - NB: more expensive than letting Apache do it
# (uses same log format as Apache "extended" one)
#LogMethods[]=logfile

# by logging directly to a csv-formatted file.
# The csv contains the perf. data first, then some useful http request info: date, cient ip, http status code, content length, url
LogMethods[]=csv

# by logging to syslog (on windows messages will be added to the Event Log)
# nb: syslog message format is currently the same as Apache extended log
#LogMethods[]=syslog

# not yet supported
# by inserting data directly in a custom table in the eZ database - be wary of its size!
#LogMethods[]=database

# The php classes which can be used to log the measured data.
# Every class listed here needs to implement the eZPerfLoggerLogger interface
LogProviders[]
LogProviders[]=eZPerfLogger

# Optional: logging filters
# Every php class registered here needs to implement the eZPerfLoggerFilter interface.
# If no logging filter is defined, performance data is logged on every poge.
# If filters are defined, perf. data is logged only when at least one filter class returns true
LogFilters[]


[logfileSettings]
# The name of the log file, for example mytest.log
# NB: this is used only by logging method "logfile" above.
# When logging method "apache" is used you should properly configure logfile.ini
FileName=var/log/ezperflog.log

# Whether to rotate the perf log files when running the "rotatelogs" cronjob
RotateFiles=enabled
# Max log file size (in bytes) before rotation happens. Defaults to 1MB
MaxLogSize=1048576
# How many logfiles to keep. Set to 0 to never remove
MaxLogrotateFiles=8

# The following settings apply when StorageClass=eZPerfLoggerCSVStorage or
# when LogMethods[]=csv
[csvSettings]
FileName=var/log/ezperflog.csv
# separator char for csv
Separator=;
# quotes around url field. Can be left empty
Quotes=


# The following settings apply in a 2-step scenario:
# 1. use "apache" or "logfile" in LogMethods
# 2. run the updateperfstats cronjob to parse the log file and store the retrieved data
#    in some storage repository (currently supported: csv file)
[ParsingSettings]
# A list of regexps, used to find urls not to match when parsing the access log
ExcludeUrls[]
ExcludeUrls[]=/\.(css|gif|ico|js|jpe?g|png)$/

# The php class which will be used to store the perf data (typically in a db):
# when the updateperfstats cronjob is run, it parses the access log, extracts
# data and passes it to this class to storing elsewhere
# supported: eZPerfLoggerCSVStorage (in the future: eZPerfLoggerDBStorage)
# NB: when the LogMethod "database" is used (see parameter above), perf data
# is stored directly to the db just as if eZPerfLoggerDBStorage was used here.
# In fact, in that case you should not run the cronjob, as you will get double
# statistics
StorageClass=eZPerfLoggerCSVStorage



# Besides logging data, we can enable xhprof to get complete profiling info
# NB: needs the xhprof PECL extension to work
[XHProfSettings]
# when this is enabled, and any code starts an xhprof session, an html comment is
# added to the bottom of the page with the profiling session ids. This is used to
# show a link in the debug output panel to view the profiling data
AppendXHProfTag=enabled
# Location of the dot command from graphviz (full path), if not in the system PATH
DotCommand=dot
